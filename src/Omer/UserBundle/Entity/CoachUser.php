<?php
/**
 * Created by PhpStorm.
 * User: marina
 * Date: 21.01.17
 * Time: 19:41
 */

namespace Omer\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Omer\UserBundle\Traits\PersonalDataTrait;
use Omer\UserBundle\Traits\PasswordGeneratorTrait;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 * @ORM\Table(name="coach_user")
 */
class CoachUser extends User
{
    use PasswordGeneratorTrait;
    use PersonalDataTrait;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     *
     * @Assert\NotBlank(
     *     message="value is invalid(field must be non empty)",
     *     )
     *
     * @ORM\Column(name="email", type="string", nullable=true)
     */
    protected $email;

    /**
     * @var string
     * @ORM\Column(name="dietary_concerns", type="string", nullable=true)
     */
    private $dietaryConcerns;

    /**
     * @var string
     * @ORM\Column(name="medical_concerns", type="string", nullable=true)
     */
    private $medicalConcerns;

    /**
     * @var string
     * @ORM\Column(name="address", type="string", nullable=true)
     */
    private $address;

    /**
     * @ORM\ManyToMany(targetEntity="Omer\TeamBundle\Entity\BaseTeam", mappedBy="coaches")
     */
    protected $teams;

    /**
     * @ORM\Column(name="is_main", type="boolean", nullable=true)
     */
    protected $isMain;

    public function __construct()
    {
        parent::__construct();
        $this->addRole("ROLE_COACH");
        $this->setEnabled(true);
        $this->setPlainPassword($this->generatePassword());
    }

    public function setEmail($email)
    {
        $this->setUsername($email);
        return parent::setEmail($email); // TODO: Change the autogenerated stub
    }

    /**
     * Add team
     *
     * @param \Omer\TeamBundle\Entity\Team $team
     *
     * @return CoachUser
     */
    public function addTeam(\Omer\TeamBundle\Entity\BaseTeam $team)
    {
        $this->teams[] = $team;

        return $this;
    }

    /**
     * Remove team
     *
     * @param \Omer\TeamBundle\Entity\Team $team
     */
    public function removeTeam(\Omer\TeamBundle\Entity\BaseTeam $team)
    {
        $this->teams->removeElement($team);
    }

    /**
     * Get teams
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTeams()
    {
        return $this->teams;
    }

    /**
     * Set isMain
     *
     * @param boolean $isMain
     *
     * @return CoachUser
     */
    public function setIsMain($isMain)
    {
        $this->isMain = $isMain;

        return $this;
    }

    /**
     * Get isMain
     *
     * @return boolean
     */
    public function getIsMain()
    {
        return $this->isMain;
    }

    /**
     * Set dietaryConcerns
     *
     * @param string $dietaryConcerns
     *
     * @return CoachUser
     */
    public function setDietaryConcerns($dietaryConcerns)
    {
        $this->dietaryConcerns = $dietaryConcerns;

        return $this;
    }

    /**
     * Get dietaryConcerns
     *
     * @return string
     */
    public function getDietaryConcerns()
    {
        return $this->dietaryConcerns;
    }

    /**
     * Set medicalConcerns
     *
     * @param string $medicalConcerns
     *
     * @return CoachUser
     */
    public function setMedicalConcerns($medicalConcerns)
    {
        $this->medicalConcerns = $medicalConcerns;

        return $this;
    }

    /**
     * Get medicalConcerns
     *
     * @return string
     */
    public function getMedicalConcerns()
    {
        return $this->medicalConcerns;
    }

    /**
     * Set address
     *
     * @param string $address
     *
     * @return CoachUser
     */
    public function setAddress($address)
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Get address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }
}
